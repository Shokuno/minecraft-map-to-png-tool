
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Shokuno
 */
public class MainFrame extends javax.swing.JFrame {
    
    
    private MinecraftMap map;
    private MinecraftMapColors colors;
    
    private boolean mapLoaded = false;
    private boolean colorMenuOpen = false;
    private boolean versionSelected = false;
    

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        // Center frame on screen
        this.setLocationRelativeTo(null);
        
        colorList.setListData(new String[0]);
        
        drawPanel.setVisible(false);
        colorPanel.setVisible(true);
        loadMapButton.setEnabled(false);
        exportPngButton.setEnabled(false);
    }
    
    private void updateView() {
        uiEnabler();
        repaint();
    }
    
    private void uiEnabler() {
        drawPanel.setVisible(mapLoaded);
        exportPngButton.setEnabled(mapLoaded);
        
        loadMapButton.setEnabled(versionSelected);
        
        colorPanel.setVisible(colorMenuOpen);
        colorPanelButton.setEnabled(!colorMenuOpen);
    }
    
    private void doAdd() throws IOException, IllegalArgumentException {
        String input = idTextField.getText();

        MinecraftFileReader.checkForInput(input);

        int id = Integer.valueOf(input);

        // a jframe here isn't strictly necessary, but it makes the example a little more real
        JFrame frame = new JFrame("Enter rgb (format: r,g,b");

        // prompt the user to enter their nam
        String temp = JOptionPane.showInputDialog(frame, "Please enter RGB values as R,G,B").replace(" ", "");
        String[] tempArr = temp.split(",");
        Integer[] rgb = new Integer[3];
        for (int i = 0; i < rgb.length; i++) {
            rgb[i] = Integer.valueOf(tempArr[i]);
        }
//        System.out.println(rgb[0]+","+ rgb[1]+","+ rgb[2]);

        colors.addColor(new MinecraftColor(id, new Color(rgb[0], rgb[1], rgb[2])));
        MinecraftFileReader.saveMapColorsReadable(colors);
        idTextField.requestFocus();
        idTextField.selectAll();

        colorList.setListData(colors.colorsToString());
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        drawPanel = new DrawPanel();
        loadMapButton = new javax.swing.JButton();
        colorPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        addColorButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        idTextField = new javax.swing.JTextField();
        changeVersionButton = new javax.swing.JButton();
        removeColorButton = new javax.swing.JButton();
        newVersionButton = new javax.swing.JButton();
        versionTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        colorList = new javax.swing.JList<>();
        colorPanelButton = new javax.swing.JButton();
        exportPngButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(900, 600));

        drawPanel.setMinimumSize(new java.awt.Dimension(256, 256));
        drawPanel.setPreferredSize(new java.awt.Dimension(512, 512));

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 512, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 512, Short.MAX_VALUE)
        );

        loadMapButton.setText("Load a map from color data");
        loadMapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMapButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Current Minecraft version:");

        addColorButton.setText("Add Color");
        addColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addColorButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("ID (integer):");

        idTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTextFieldActionPerformed(evt);
            }
        });

        changeVersionButton.setText("Change Version");
        changeVersionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeVersionButtonActionPerformed(evt);
            }
        });

        removeColorButton.setText("Remove Color (enter color ID)");
        removeColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeColorButtonActionPerformed(evt);
            }
        });

        newVersionButton.setText("New Version");
        newVersionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newVersionButtonActionPerformed(evt);
            }
        });

        colorList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(colorList);

        javax.swing.GroupLayout colorPanelLayout = new javax.swing.GroupLayout(colorPanel);
        colorPanel.setLayout(colorPanelLayout);
        colorPanelLayout.setHorizontalGroup(
            colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(colorPanelLayout.createSequentialGroup()
                        .addGroup(colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(colorPanelLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(versionTextField))
                            .addGroup(colorPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(idTextField))
                            .addComponent(changeVersionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addColorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeColorButton, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                            .addComponent(newVersionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        colorPanelLayout.setVerticalGroup(
            colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(versionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(changeVersionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newVersionButton)
                .addGap(42, 42, 42)
                .addComponent(addColorButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeColorButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        colorPanelButton.setText("Go to Color Menu");
        colorPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorPanelButtonActionPerformed(evt);
            }
        });

        exportPngButton.setText("Export to png");
        exportPngButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPngButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loadMapButton, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                    .addComponent(colorPanelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportPngButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(drawPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(colorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(colorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(loadMapButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(colorPanelButton)
                                .addGap(53, 53, 53)
                                .addComponent(exportPngButton))
                            .addComponent(drawPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadMapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMapButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Minecraft Map Color data", "mmd");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        
        File file = null;
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = chooser.getSelectedFile();
        }
        
        if (file != null) {
            try {
                map = MinecraftFileReader.readColorBinaryHexFile(file, colors);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                    "An error occured trying to read the file!",
                    "I/O Error!",
                    JOptionPane.ERROR_MESSAGE);
            }
            
            drawPanel.setMap(map);
            
            mapLoaded = true;
            colorMenuOpen = false;
        }
        
        updateView();
    }//GEN-LAST:event_loadMapButtonActionPerformed

    private void addColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addColorButtonActionPerformed
        try {
            doAdd();
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this,
                    e.getMessage(),
                    "Invalid Input!",
                    JOptionPane.ERROR_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this,
                    "An error occured trying write to the file!",
                    "I/O Error!",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addColorButtonActionPerformed

    private void changeVersionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeVersionButtonActionPerformed
        try {
            String version = versionTextField.getText();
            
            if(!MinecraftFileReader.checkForMapColorsFileExsitence(version)) {
                JOptionPane.showMessageDialog(this,
                        "No file exists for this version!\nYou can create the version by clicking 'New Version'.",
                        "No file found",
                        JOptionPane.ERROR_MESSAGE);
            }
            else {
                colors = MinecraftFileReader.loadMapColorsReadable(versionTextField.getText());
                loadMapButton.setEnabled(true);
                
                colorList.setListData(colors.colorsToString());
                
                mapLoaded = true;
                
            }
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this,
                    e.getMessage(),
                    "Invalid Input!",
                    JOptionPane.ERROR_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this,
                    "An error occured trying to read the file!",
                    "I/O Error!",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_changeVersionButtonActionPerformed

    private void newVersionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newVersionButtonActionPerformed
        try {
            String version = versionTextField.getText();
            boolean alreadyExits = false;
            boolean overwrite = false;
            if(MinecraftFileReader.checkForMapColorsFileExsitence(version)) {
                alreadyExits = true;
                int choice = JOptionPane.showConfirmDialog(this,
                        "A Version file for this Minecraft version already exists.\n Would you like to overwrite it?\nThis action is permanent and cannot be undone!",
                        "File already exists.",
                        JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {overwrite = true;   }
            }
            
            if (overwrite || !alreadyExits) {
                colors = new MinecraftMapColors(version);

                MinecraftFileReader.saveMapColorsReadable(colors);

                idTextField.requestFocus();
                idTextField.selectAll();

                colorList.setListData(colors.colorsToString());

                JOptionPane.showMessageDialog(this,
                        "A new Version file was created. You can add colors via the\n"
                                + "'Add Color' button or go to the file location and edit it there.\n\n"
                                + "The file is located in the same directory as the tool and every\n"
                                + "dot is replaced by two minus signs. It's a normal text file with the file extension .mmcv.\n"
                                + "If you add colors directly to the file you will have to reload it by changing to the version.");
            }
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this,
                    e.getMessage(),
                    "Invalid Input!",
                    JOptionPane.ERROR_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this,
                    "An error occured trying write to the file!",
                    "I/O Error!",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_newVersionButtonActionPerformed

    private void removeColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeColorButtonActionPerformed
        if (!colors.remove(Integer.valueOf(idTextField.getText()))) {
            JOptionPane.showMessageDialog(this,
                    "Please enter a valid ID",
                    "Action failed!",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removeColorButtonActionPerformed

    private void colorPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorPanelButtonActionPerformed
        colorMenuOpen = true;
        updateView();
    }//GEN-LAST:event_colorPanelButtonActionPerformed

    private void idTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTextFieldActionPerformed
        try {
            doAdd();
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this,
                    e.getMessage(),
                    "Invalid Input!",
                    JOptionPane.ERROR_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this,
                    "An error occured trying to write to the file!",
                    "I/O Error!",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_idTextFieldActionPerformed

    private void exportPngButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPngButtonActionPerformed
        try {
            String[] options = {"128", "256" ,"512", "1024"};
            int resolution = Integer.valueOf((String)JOptionPane.showInputDialog(null, "Choose a resoltion", 
                "Choose a resolution", JOptionPane.QUESTION_MESSAGE, null, options, options[1]));
            
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    ".png files", "png");
            chooser.setFileFilter(filter);
            int returnVal = chooser.showOpenDialog(this);

            File file = null;

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = chooser.getSelectedFile();
            }

            if (file != null) {

                int width = resolution, height = resolution;

                // TYPE_INT_ARGB specifies the image format: 8-bit RGBA packed
                // into integer pixels
                BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);

                Graphics2D g2 = bi.createGraphics();

                map.draw(g2, width, height);

                ImageIO.write(bi, "PNG", file);
            }

        } catch (IOException ie) {
            JOptionPane.showMessageDialog(this,
                    "An error occured trying to write to/read from the file!",
                    "I/O Error!",
                    JOptionPane.ERROR_MESSAGE);
            
            ie.printStackTrace();
        }
    }//GEN-LAST:event_exportPngButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addColorButton;
    private javax.swing.JButton changeVersionButton;
    private javax.swing.JList<String> colorList;
    private javax.swing.JPanel colorPanel;
    private javax.swing.JButton colorPanelButton;
    private DrawPanel drawPanel;
    private javax.swing.JButton exportPngButton;
    private javax.swing.JTextField idTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadMapButton;
    private javax.swing.JButton newVersionButton;
    private javax.swing.JButton removeColorButton;
    private javax.swing.JTextField versionTextField;
    // End of variables declaration//GEN-END:variables
}
